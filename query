first letter is upper case and after first letter is lower case

select user_id, concat(
    Upper(substring(name,1,1)),
    Lower(substring(name,2,length(name)))
) as name
from Users;



multiple data in one line

select sell_date,count(distinct(product)) as num_sold,
GROUP_CONCAT(distinct(product) ORDER BY product ASC SEPARATOR ',') AS products
from Activities group by sell_date;


cross join 


select s.student_id, s.student_name,Subjects.subject_name,
count(e.subject_name) as attended_exams from Students s
cross join Subjects left join Examinations e on s.student_id=e.student_id and e.subject_name=Subjects.subject_name
group by s.student_id, s.student_name,Subjects.subject_name
order by s.student_id, s.student_name;


if and time stamp use 

SELECT s.user_id, 
  ROUND(AVG(IF(c.action='confirmed',1,0)),2) as confirmation_rate 
FROM Signups s
LEFT JOIN Confirmations c using (user_id)
GROUP BY s.user_id;

join basic

SELECT a.name 
FROM Employee a 
JOIN Employee b ON a.id = b.managerId 
GROUP BY b.managerId 
HAVING COUNT(*) >= 5;

regex in sql  mail check

SELECT *
FROM Users
WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9_\.\-]*@leetcode(\\?com)?\\.com$';


upper and lower case in sql

select user_id, concat(
    Upper(substring(name,1,1)),
    Lower(substring(name,2,length(name)))
) as name
from Users
order by user_id asc;

question is 
Prices table:
+------------+------------+------------+--------+
| product_id | start_date | end_date   | price  |
+------------+------------+------------+--------+
| 1          | 2019-02-17 | 2019-02-28 | 5      |
| 1          | 2019-03-01 | 2019-03-22 | 20     |
| 2          | 2019-02-01 | 2019-02-20 | 15     |
| 2          | 2019-02-21 | 2019-03-31 | 30     |
+------------+------------+------------+--------+
UnitsSold table:
+------------+---------------+-------+
| product_id | purchase_date | units |
+------------+---------------+-------+
| 1          | 2019-02-25    | 100   |
| 1          | 2019-03-01    | 15    |
| 2          | 2019-02-10    | 200   |
| 2          | 2019-03-22    | 30    |
+------------+---------------+-------+


select p.product_id, ifnull(round(sum(units*price)/sum(units),2),0) as average_price
from Prices p left join UnitsSold u on p.product_id=u.product_id and u.purchase_date between start_date and end_date group by product_id

Questions - 17

Activity table:
+---------+------------+---------------+---------------+
| user_id | session_id | activity_date | activity_type |
+---------+------------+---------------+---------------+
| 1       | 1          | 2019-07-20    | open_session  |
| 1       | 1          | 2019-07-20    | scroll_down   |
| 1       | 1          | 2019-07-20    | end_session   |
| 2       | 4          | 2019-07-20    | open_session  |
| 2       | 4          | 2019-07-21    | send_message  |
| 2       | 4          | 2019-07-21    | end_session   |
| 3       | 2          | 2019-07-21    | open_session  |
| 3       | 2          | 2019-07-21    | send_message  |
| 3       | 2          | 2019-07-21    | end_session   |
| 4       | 3          | 2019-06-25    | open_session  |
| 4       | 3          | 2019-06-25    | end_session   |
+---------+------------+---------------+---------------+
Output: 
+------------+--------------+ 
| day        | active_users |
+------------+--------------+ 
| 2019-07-20 | 2            |
| 2019-07-21 | 2            |
+------------+--------------+



select activity_date as day, count(distinct user_id) as  active_users from Activity
where datediff('2019-07-27', activity_date)<30 and activity_date <'2019-07-29'
group by day




# Write your MySQL query statement below
select product_id, year as first_year,quantity, price from Sales
where (product_id, year) in (select product_id, min(year) from Sales group by product_id ) 





question - if condition

Input: 
Seat table:
+----+---------+
| id | student |
+----+---------+
| 1  | Abbot   |
| 2  | Doris   |
| 3  | Emerson |
| 4  | Green   |
| 5  | Jeames  |
+----+---------+
Output: 
+----+---------+
| id | student |
+----+---------+
| 1  | Doris   |
| 2  | Abbot   |
| 3  | Green   |
| 4  | Emerson |
| 5  | Jeames  |
+----+---------+


select case 
when id=(select max(id) from Seat) and id%2=1
then id
when id%2=0 then id-1
when id%2=1 then id+1
end as id,student from Seat order by id asc





Example 1:

Input: 
Insurance table:
+-----+----------+----------+-----+-----+
| pid | tiv_2015 | tiv_2016 | lat | lon |
+-----+----------+----------+-----+-----+
| 1   | 10       | 5        | 10  | 10  |
| 2   | 20       | 20       | 20  | 20  |
| 3   | 10       | 30       | 20  | 20  |
| 4   | 10       | 40       | 40  | 40  |
+-----+----------+----------+-----+-----+
Output: 
+----------+
| tiv_2016 |
+----------+
| 45.00    |
+----------+

# Write your MySQL query statement below
SELECT ROUND(SUM(TIV_2016),2) AS TIV_2016 FROM Insurance a
WHERE EXISTS (SELECT * FROM Insurance WHERE PID <> a.PID AND TIV_2015 = a.TIV_2015)
AND NOT EXISTS (SELECT * FROM Insurance WHERE PID <> a.PID AND (LAT,LON) = (a.LAT,a.LON));




Input: 
Employees table:
+-------------+---------+------------+-----+
| employee_id | name    | reports_to | age |
+-------------+---------+------------+-----+
| 9           | Hercy   | null       | 43  |
| 6           | Alice   | 9          | 41  |
| 4           | Bob     | 9          | 36  |
| 2           | Winston | null       | 37  |
+-------------+---------+------------+-----+
Output: 
+-------------+-------+---------------+-------------+
| employee_id | name  | reports_count | average_age |
+-------------+-------+---------------+-------------+
| 9           | Hercy | 2             | 39          |
+-------------+-------+---------------+-------------+


select e1.employee_id, e1.name, count(e2.employee_id) as reports_count,
     round(avg(e2.age)) as average_age
     from employees e1 join employees e2 on e1.employee_id = e2.reports_to
group by e1.employee_id, e1.name
order by e1.employee_id




Input: 
Customer table:
+-------------+--------------+--------------+-------------+
| customer_id | name         | visited_on   | amount      |
+-------------+--------------+--------------+-------------+
| 1           | Jhon         | 2019-01-01   | 100         |
| 2           | Daniel       | 2019-01-02   | 110         |
| 3           | Jade         | 2019-01-03   | 120         |
| 4           | Khaled       | 2019-01-04   | 130         |
| 5           | Winston      | 2019-01-05   | 110         | 
| 6           | Elvis        | 2019-01-06   | 140         | 
| 7           | Anna         | 2019-01-07   | 150         |
| 8           | Maria        | 2019-01-08   | 80          |
| 9           | Jaze         | 2019-01-09   | 110         | 
| 1           | Jhon         | 2019-01-10   | 130         | 
| 3           | Jade         | 2019-01-10   | 150         | 
+-------------+--------------+--------------+-------------+
Output: 
+--------------+--------------+----------------+
| visited_on   | amount       | average_amount |
+--------------+--------------+----------------+
| 2019-01-07   | 860          | 122.86         |
| 2019-01-08   | 840          | 120            |
| 2019-01-09   | 840          | 120            |
| 2019-01-10   | 1000         | 142.86         |
+--------------+--------------+----------------+

# Write your MySQL query statement below
SELECT visited_on, 
    (
        SELECT SUM(amount) 
        FROM Customer 
        WHERE visited_on BETWEEN DATE_SUB(c.visited_on, INTERVAL 6 DAY) 
        AND c.visited_on 
    ) AS amount, ROUND(
        (
           SELECT SUM(amount)/7 
            FROM Customer 
            WHERE visited_on BETWEEN DATE_SUB(c.visited_on, INTERVAL 6 DAY) 
            AND c.visited_on 
        ), 2
    ) AS average_amount
FROM Customer c 
WHERE visited_on >= (
    SELECT DATE_ADD(MIN(visited_on), INTERVAL 6 DAY) 
    FROM Customer 
) 
GROUP BY visited_on 
ORDER BY visited_on;



Input: 
RequestAccepted table:
+--------------+-------------+-------------+
| requester_id | accepter_id | accept_date |
+--------------+-------------+-------------+
| 1            | 2           | 2016/06/03  |
| 1            | 3           | 2016/06/08  |
| 2            | 3           | 2016/06/08  |
| 3            | 4           | 2016/06/09  |
+--------------+-------------+-------------+
Output: 
+----+-----+
| id | num |
+----+-----+
| 3  | 3   |
+----+-----+
Explanation: 
The person with id 3 is a friend of people 1, 2, and 4, so he has three friends in total, which is the most number than any others.


# Write your MySQL query statement below
(SELECT r.requester_id as id,IFNULL(count(requester_id),0) + IFNULL(acc.cnt,0) as num
from (Select count(accepter_id)  as cnt, accepter_id as id
from RequestAccepted r
GROUP BY r.accepter_id
) as acc RIGHT OUTER JOIN RequestAccepted r 
ON acc.id=r.requester_id 
GROUP BY r.requester_id
)
UNION (
Select accepter_id as id,count(accepter_id) as num
from RequestAccepted r
where accepter_id NOT IN (
    SELECT distinct requester_id from RequestAccepted
)
GROUP BY r.accepter_id
)
ORDER BY num desc
limit 1











# Write your MySQL query statement below
(select name as results from movierating
join users using(user_id)
group by user_id order by count(rating) desc, name limit 1)
union all
(select title as results  from movierating 
join movies using(movie_id)
where year(created_at)=2020 and month(created_at)=02 
group by title order by avg(rating) desc, title limit 1)